---
title: "Mortality model"
author: "Elena Colman & Fiona Harris"
format:
  html:
    theme: 
      - flatly
    page-layout: full
    toc: true
    toc-location: left
    math: mathjax
    code-fold: true
    code-summary: "Show code"
    page-navigation: true
    embed-resources: true
editor: visual
---

## Quarto

pread.

![Mortality dependent on age groups](Change%20in%20mortality%20rate.png)

```{r}
#| context: server 
#| echo: false 
#| message: false 
#| warning: false  

library(deSolve) 
library(ggplot2) 
library(tidyr) 
library(dplyr) 
library(shiny) 
library(jsonlite) 
library(purrr)   
```

# Age-Dependent Mortality in Possums

```{r}
#| label: run-mortality-model
#| context: server
#| echo: false
#| warning: false
#| message: false

MortalityModel <- function(time, state, parameters) {
  with(as.list(c(state, parameters)), {
    NJ <- SJ + EJ + IJ
    NAd <- SAd + EAd + IAd
    N <- NJ + NAd
    Y = 1 / (1 + exp(-rho * (NJ + NAd - kappa)))
    X = 1 - Y
    delta = 0.1

    births_total <- X * lambda * (SAd + EAd + IAd)
    birth_SJ <- X * lambda * (SAd + EAd) + lambda * X * IAd * (1 - delta)
    births_EJ <- X * lambda * delta * IAd
    infection <- r_beta * (IJ / NJ + IAd / NAd)

    dSJ <- birth_SJ - (mu1 * Y + gammma) * SJ - infection * SJ
    dEJ <- infection * SJ + births_EJ - (mu1 * Y + gammma + alpha) * EJ
    dIJ <- alpha * EJ - (mu1 * Y + gammma + tau1) * IJ
    dSAd <- gammma * SJ - (mu2 * Y ) * SAd - infection * SAd
    dEAd <- gammma * EJ + infection * SAd - (mu2 * Y  + alpha) * EAd
    dIAd <- gammma * IJ + alpha * EAd - (mu2 * Y +  tau2) * IAd

    natural_deaths_juveniles <- mu1 * Y * (SJ + EJ + IJ )
    natural_deaths_adults <- (mu2 * Y) * (SAd + EAd + IAd)
    natural_deaths_total <- natural_deaths_juveniles+natural_deaths_adults
    tb_deaths_juveniles <- tau1 * IJ
    tb_deaths_adults <- tau2 * IAd
    tb_deaths_total <- tb_deaths_juveniles + tb_deaths_adults
    total_population <- NJ + NAd

    return(list(c(dSJ, dEJ, dIJ, dSAd, dEAd, dIAd),
      natural_deaths_juveniles = natural_deaths_juveniles, natural_deaths_adults=natural_deaths_adults, 
      natural_deaths_total=natural_deaths_total,
      tb_deaths_juveniles = tb_deaths_juveniles,
      tb_deaths_adults = tb_deaths_adults,
      tb_deaths_total = tb_deaths_total,
      total_population = total_population
    ))
  })
}
yini <- c(SJ = 20, EJ = 0, IJ = 0, SAd = 30, EAd = 0, IAd = 1)
times <- seq(0, 7.5, by = 0.1)


# Parameter grid (mortality rates only)
mortality_grid <- tidyr::expand_grid(
  tau1 = c(seq(0.1, 2, 0.5)),
  tau2 = c(seq(0.1, 2, 0.5)),
  mu1 = c(seq(0.0, 1, 0.2)),
  mu2 = c(seq(0.0, 1, 0.2)),
)


mortality_sim <- mortality_grid |>
  rowwise() |>
  mutate(sim = list(as.data.frame(
    ode(y = yini, times = times, func = MortalityModel,
        parms = c(
          lambda = 5, kappa = 50, rho = 0.5,
          r_beta = 2.1, alpha = 5, gammma = 1,
          tau1 = tau1, tau2 = tau2, mu1 = mu1, mu2=mu2
        ))
  ))) |>
  unnest(sim) |>
  ungroup()



# Make available to OJS
ojs_define(mortality_data = purrr::transpose(as.data.frame(mortality_sim)))


```

```{ojs}


//| echo: false

viewof tau1 = Inputs.range([0.1, 3], {step: 0.3, label: "TB Mortality (Juveniles)"})
viewof tau2 = Inputs.range([0.1, 3], {step: 0.3, label: "TB Mortality (Adults)"})
viewof mu1 = Inputs.range([0.1, 1], {step: 0.1, label: "Natural Mortality (Juveniles)"})
viewof mu2 = Inputs.range([0.1, 1], {step: 0.1, label: "Natural Mortality(Adults)"})

filteredMortality = mortality_data.filter(d =>
  d.tau1 === tau1 &&
  d.tau2 === tau2 &&
  d.mu1 === mu1 &&
  d.mu2 === mu2 )



mortality_long = filteredMortality.flatMap(d => [
  { time: d.time, Deaths: d.natural_deaths_juveniles, Type: "Natural mortality in juveniles" },
  { time: d.time, Deaths: d.natural_deaths_adults, Type: "Natural mortality in adults" },
    { time: d.time, Deaths: d.natural_deaths_total, Type: "Total natural mortality" },
  { time: d.time, Deaths: d.tb_deaths_juveniles, Type: "TB Juveniles" },
  { time: d.time, Deaths: d.tb_deaths_adults, Type: "TB Adults" },
  { time: d.time, Deaths: d.tb_deaths_total, Type: "Total TB Mortality" }
])


compartment_mortality = filteredMortality.flatMap(d => [
  { time: d.time, Count: d.SJ, Compartment: "Susceptible Juveniles" },
  { time: d.time, Count: d.EJ, Compartment: "Exposed Juveniles" },
  { time: d.time, Count: d.IJ, Compartment: "Infectious Juveniles" },
  { time: d.time, Count: d.SAd, Compartment: "Susceptible Adults" },
  { time: d.time, Count: d.EAd, Compartment: "Exposed Adults" },
  { time: d.time, Count: d.IAd, Compartment: "Infectious Adults" }
])


```

```{ojs}


//| echo: false

html`<div style="display: flex; gap: 2rem;">
  <div style="width: 250px;">
    <p><strong>Mortality Sliders</strong></p>
    ${viewof tau1}
    ${viewof tau2}
    ${viewof mu1}
    ${viewof mu2}
    <p style="font-size: 0.9em;">Explore how changes in natural and TB-specific mortality influence dynamics in the possum population.</p>
  </div>

  <div>
    <h3>Age-dependent mortality</h3>

    <p><em>TB Infection Model</em></p>
  
    ${Plot.plot({
    marks: [
    Plot.lineY(compartment_mortality, {
    x: "time",
    y: "Count",
    stroke: "Compartment"
  }),
  ],
  color: {
    domain: [
      "Susceptible Juveniles",
      "Exposed Juveniles",
      "Infectious Juveniles",
      "Susceptible Adults",
      "Exposed Adults",
      "Infectious Adults"
    ],
    range: ["blue", "orange", "red", "green", "purple", "brown"],
    type: "ordinal",
    legend: true, 
    label: "Compartment"
  },
  x: { label: "Time (Years)" },
  y: { label: "Number of Possums" },
  width: 700,
  height: 350,
  marginLeft: 50,
  marginBottom: 40
})}
 
  
  
  <p><em>Total population over time</em></p>

    ${Plot.lineY(filteredMortality, {
      x: "time",
      y: (d) => d.SJ + d.EJ + d.IJ + d.SAd + d.EAd + d.IAd,
      stroke: "steelblue"
    }).plot({
      y: {label: "Total Population"},
      x: {label: "Time (Years)"},
      marginLeft: 50,
      marginBottom: 40,
      width: 600,
      height: 300
    })}
 
    


    <p><em>Mortality Over Time</em></p>
    ${Plot.plot({
      marks: [Plot.lineY(mortality_long, {
        x: "time",
        y: "Deaths",
        stroke: "Type"
      })],
      
      color: {
  domain: [
    "Natural mortality in juveniles",
    "Natural mortality in adults",
    "Total natural mortality",
    "TB Juveniles",
    "TB Adults",
    "Total TB Mortality"
  ],
  range: ["green", "red", "orange", "black"],
  type: "ordinal",
  label: "Mortality Type",
  legend: true
      },
      x: {label: "Time (Years)"},
      y: {label: "Deaths per Unit Time"},
      width: 700,
      height: 350
    })}
  </div>
</div>`

```
